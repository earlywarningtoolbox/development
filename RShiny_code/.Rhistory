Kt_var<-cor.test(timevec,indic_var,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)
Ktauestind_varorig<-Kt_var$estimate
timevec<-seq(1,length(indic_ar1))
Kt_ar1<-cor.test(timevec,indic_ar1,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)
Ktauestind_ar1orig<-Kt_ar1$estimate
Kt_var<-cor.test(timevec,indic_var,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)
Ktauestind_varorig<-Kt_var$estimate
arma=matrix(,4,5)
for (ij in 1:4){
for (jj in 0:4){
ARMA<-arima(nsmY, order = c(ij,0,jj),include.mean = FALSE)
arma[ij,jj+1]=ARMA$aic
# 		print(paste("AR","MA", "AIC"),quote=FALSE)
# 		print(paste(ij,jj,ARMA$aic),zero.print=".",quote=FALSE)
}
}
# Simulate ARMA(p,q) model fitted on residuals
ind=which(arma==min(arma),arr.ind=TRUE)
ARMA<-arima(nsmY, order = c(ind[1],0,ind[2]-1),include.mean = FALSE)
Ktauestind_ar1 <- numeric()
Ktauestind_var <- numeric()
for (jjj in 1:boots){
x=arima.sim(n = length(nsmY), list(ar = c(ARMA$coef[1:ind[1]]), ma = c(ARMA$coef[(1+ind[1]):(ind[1]+ind[2]-1)])),sd=sqrt(ARMA$sigma2))
## Rearrange data for indicator calculation
nMR1<-matrix(data=NA,nrow=mw,ncol=omw)
for (i in 1:omw){
Ytw<-x[i:(i+mw-1)]
nMR1[,i]<-Ytw}
# Estimate indicator
indic_ar1<-apply(nMR1,2,function(x){nAR1<-ar.ols(x,aic= FALSE, order.max=1,dmean=FALSE,intercept=FALSE)
nAR1$ar})
indic_var<-apply(nMR1,2,var)
# Calculate trend statistics
timevec<-seq(1,length(indic_ar1))
Kt_ar1<-cor.test(timevec,indic_ar1,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)
Ktauestind_ar1[jjj]<-Kt_ar1$estimate
Kt_var<-cor.test(timevec,indic_var,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)
Ktauestind_var[jjj]<-Kt_var$estimate
}
# Estimate probability of false positive
q_ar1<-sort(Ktauestind_ar1,na.last=NA)
Kpos_ar1<-max(which(Ktauestind_ar1orig>q_ar1),na.rm=TRUE)
p<-(boots+1-Kpos_ar1)/boots
print(paste('significance autocorrelation p = ',p,' estimated from ',boots,' surrogate ARMA timeseries'))
q_var<-sort(Ktauestind_var,na.last=NA)
Kpos_var<-max(which(Ktauestind_varorig>q_var),na.rm=TRUE)
p<-(boots+1-Kpos_var)/boots
print(paste('significance variance p = ',p,' estimated from ',boots,' surrogate ARMA timeseries'))
# Plotting
layout(matrix(1:2,1,2))
par(font.main=10,mar=(c(4.6,3.5,0.5,2)+0.2),mgp=c(2,1,0),oma=c(0.5,0.5,2,0),cex.axis=0.8,cex.lab=0.8,cex.main=0.8)
hist(Ktauestind_ar1,freq=TRUE,nclass=20,xlim=c(-1,1),col="blue",main=NULL,xlab="Surrogate Kendall tau estimates",ylab="occurrence",ylim=c(0,boots))
abline(v=q_ar1[s_level*boots],col="black",lwd=1)
abline(v=q_ar1[(1-s_level)*boots],col="black",lwd=1)
points(Ktauestind_ar1orig,0,pch=21, bg="black", col = "black", cex=1)
mtext(Autocorrelation ,side=3,line=0.2, outer=TRUE)
hist(Ktauestind_var,freq=TRUE,nclass=20,xlim=c(-1,1),col="blue",main=NULL,xlab="Surrogate Kendall tau estimates",ylab="occurrence",ylim=c(0,boots))
abline(v=q_var[s_level*boots],col="black",lwd=1)
abline(v=q_var[(1-s_level)*boots],col="black",lwd=1)
points(Ktauestind_varorig,0,pch=21, bg="black", col = "black", cex=1)
mtext(Variance ,side=3,line=0.2, outer=TRUE)
s_level=0.05
# Plotting
layout(matrix(1:2,1,2))
par(font.main=10,mar=(c(4.6,3.5,0.5,2)+0.2),mgp=c(2,1,0),oma=c(0.5,0.5,2,0),cex.axis=0.8,cex.lab=0.8,cex.main=0.8)
hist(Ktauestind_ar1,freq=TRUE,nclass=20,xlim=c(-1,1),col="blue",main=NULL,xlab="Surrogate Kendall tau estimates",ylab="occurrence",ylim=c(0,boots))
abline(v=q_ar1[s_level*boots],col="black",lwd=1)
abline(v=q_ar1[(1-s_level)*boots],col="black",lwd=1)
points(Ktauestind_ar1orig,0,pch=21, bg="black", col = "black", cex=1)
mtext(Autocorrelation ,side=3,line=0.2, outer=TRUE)
hist(Ktauestind_var,freq=TRUE,nclass=20,xlim=c(-1,1),col="blue",main=NULL,xlab="Surrogate Kendall tau estimates",ylab="occurrence",ylim=c(0,boots))
abline(v=q_var[s_level*boots],col="black",lwd=1)
abline(v=q_var[(1-s_level)*boots],col="black",lwd=1)
points(Ktauestind_varorig,0,pch=21, bg="black", col = "black", cex=1)
mtext(Variance ,side=3,line=0.2, outer=TRUE)
layout(matrix(1:2,1,2))
par(font.main=10,mar=(c(4.6,3.5,0.5,2)+0.2),mgp=c(2,1,0),oma=c(0.5,0.5,2,0),cex.axis=0.8,cex.lab=0.8,cex.main=0.8)
hist(Ktauestind_ar1,freq=TRUE,nclass=20,xlim=c(-1,1),col="blue",main=NULL,xlab="Surrogate Kendall tau estimates",ylab="occurrence",ylim=c(0,boots))
abline(v=q_ar1[s_level*boots],col="black",lwd=1)
abline(v=q_ar1[(1-s_level)*boots],col="black",lwd=1)
points(Ktauestind_ar1orig,0,pch=21, bg="black", col = "black", cex=1)
mtext("Autocorrelation" ,side=3,line=0.2, outer=TRUE)
hist(Ktauestind_var,freq=TRUE,nclass=20,xlim=c(-1,1),col="blue",main=NULL,xlab="Surrogate Kendall tau estimates",ylab="occurrence",ylim=c(0,boots))
abline(v=q_var[s_level*boots],col="black",lwd=1)
abline(v=q_var[(1-s_level)*boots],col="black",lwd=1)
points(Ktauestind_varorig,0,pch=21, bg="black", col = "black", cex=1)
mtext("Variance" ,side=3,line=0.2, outer=TRUE)
layout(matrix(1:2,1,2))
par(font.main=10,mar=(c(4.6,3.5,0.5,2)+0.2),mgp=c(2,1,0),oma=c(0.5,0.5,2,0),cex.axis=0.8,cex.lab=0.8,cex.main=0.8)
hist(Ktauestind_ar1,freq=TRUE,nclass=20,xlim=c(-1,1),col="blue",main=NULL,xlab="Surrogate Kendall tau estimates",ylab="occurrence",ylim=c(0,boots))
abline(v=q_ar1[s_level*boots],col="black",lwd=1)
abline(v=q_ar1[(1-s_level)*boots],col="black",lwd=1)
points(Ktauestind_ar1orig,0,pch=21, bg="black", col = "black", cex=1)
title("Autocorrelation",line=0.2)
hist(Ktauestind_var,freq=TRUE,nclass=20,xlim=c(-1,1),col="blue",main=NULL,xlab="Surrogate Kendall tau estimates",ylab="occurrence",ylim=c(0,boots))
abline(v=q_var[s_level*boots],col="black",lwd=1)
abline(v=q_var[(1-s_level)*boots],col="black",lwd=1)
points(Ktauestind_varorig,0,pch=21, bg="black", col = "black", cex=1)
title("Variance" ,line=0.2)
layout(matrix(1:2,1,2))
par(font.main=10,mar=(c(4.6,3.5,0.5,2)+0.2),mgp=c(2,1,0),oma=c(0.5,0.5,2,0),cex.axis=0.8,cex.lab=0.8,cex.main=0.8)
hist(Ktauestind_ar1,freq=TRUE,nclass=20,xlim=c(-1,1),col="blue",main=NULL,xlab="Surrogate Kendall tau estimates",ylab="occurrence",ylim=c(0,boots))
abline(v=q_ar1[s_level*boots],col="black",lwd=1)
abline(v=q_ar1[(1-s_level)*boots],col="black",lwd=1)
points(Ktauestind_ar1orig,0,pch=21, bg="black", col = "black", cex=1)
title("Autocorrelation",line=1)
hist(Ktauestind_var,freq=TRUE,nclass=20,xlim=c(-1,1),col="blue",main=NULL,xlab="Surrogate Kendall tau estimates",ylab="occurrence",ylim=c(0,boots))
abline(v=q_var[s_level*boots],col="black",lwd=1)
abline(v=q_var[(1-s_level)*boots],col="black",lwd=1)
points(Ktauestind_varorig,0,pch=21, bg="black", col = "black", cex=1)
title("Variance" ,line=0.2)
layout(matrix(1:2,1,2))
par(font.main=10,mar=(c(4.6,3.5,0.5,2)+0.2),mgp=c(2,1,0),oma=c(0.5,0.5,2,0),cex.axis=0.8,cex.lab=0.8,cex.main=0.8)
hist(Ktauestind_ar1,freq=TRUE,nclass=20,xlim=c(-1,1),col="blue",main=NULL,xlab="Surrogate Kendall tau estimates",ylab="occurrence",ylim=c(0,boots))
abline(v=q_ar1[s_level*boots],col="black",lwd=1)
abline(v=q_ar1[(1-s_level)*boots],col="black",lwd=1)
points(Ktauestind_ar1orig,0,pch=21, bg="black", col = "black", cex=1)
title("Autocorrelation")
hist(Ktauestind_var,freq=TRUE,nclass=20,xlim=c(-1,1),col="blue",main=NULL,xlab="Surrogate Kendall tau estimates",ylab="occurrence",ylim=c(0,boots))
abline(v=q_var[s_level*boots],col="black",lwd=1)
abline(v=q_var[(1-s_level)*boots],col="black",lwd=1)
points(Ktauestind_varorig,0,pch=21, bg="black", col = "black", cex=1)
title("Variance" ,line=0.2)
layout(matrix(1:2,1,2))
par(font.main=10,mar=(c(4.6,3.5,0.5,2)+0.2),mgp=c(2,1,0),oma=c(0.5,0.5,2,0),cex.axis=0.8,cex.lab=0.8,cex.main=0.8)
hist(Ktauestind_ar1,freq=TRUE,nclass=20,xlim=c(-1,1),col="blue",main=NULL,xlab="Surrogate Kendall tau estimates",ylab="occurrence",ylim=c(0,boots))
abline(v=q_ar1[s_level*boots],col="black",lwd=1)
abline(v=q_ar1[(1-s_level)*boots],col="black",lwd=1)
points(Ktauestind_ar1orig,0,pch=21, bg="black", col = "black", cex=1)
title("Autocorrelation",cex.main=1.3)
hist(Ktauestind_var,freq=TRUE,nclass=20,xlim=c(-1,1),col="blue",main=NULL,xlab="Surrogate Kendall tau estimates",ylab="occurrence",ylim=c(0,boots))
abline(v=q_var[s_level*boots],col="black",lwd=1)
abline(v=q_var[(1-s_level)*boots],col="black",lwd=1)
points(Ktauestind_varorig,0,pch=21, bg="black", col = "black", cex=1)
title("Variance" ,line=0.2)
boots=200
if (dim(timeseries)[2]==1){
Y=timeseries
timeindex=1:dim(timeseries)[1]
}else if(dim(timeseries)[2]==2){
Y<-timeseries[,2]
timeindex<-timeseries[,1]
}else{
warning("not right format of timeseries input")
}
# Interpolation
if (interpolate){
YY<-approx(timeindex,Y,n=length(Y),method="linear")
Y<-YY$y
}else{
Y<-Y}
# Log-transformation
if (logtransform){
Y<-log(Y+1)}
# Detrending
detrending<-match.arg(detrending)
if (detrending=="gaussian"){
if (is.null(bandwidth)){
bw<-round(bw.nrd0(timeindex))}else{
bw<-round(length(Y)*bandwidth)/100}
smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))
nsmY<-Y-smYY$y
smY<-smYY$y
}else if(detrending=="linear"){
nsmY<-resid(lm(Y~timeindex))
smY<-fitted(lm(Y~timeindex))
}else if(detrending=="first-diff"){
nsmY<-diff(Y)
timeindexdiff<-timeindex[1:(length(timeindex)-1)]
}else if(detrending=="no"){
smY<-Y
nsmY<-Y
}
# Rearrange data for indicator calculation
mw<-round(length(Y)*winsize)/100
omw<-length(nsmY)-mw+1
low<-6
high<-omw
nMR<-matrix(data=NA,nrow=mw,ncol=omw)
for (i in 1:omw){
Ytw<-nsmY[i:(i+mw-1)]
nMR[,i]<-Ytw}
# Estimate indicator
indic_ar1<-apply(nMR,2,function(x){nAR1<-ar.ols(x,aic= FALSE, order.max=1,dmean=FALSE,intercept=FALSE)
nAR1$ar})
indic_var<-apply(nMR,2,var)
# Calculate trend statistics
timevec<-seq(1,length(indic_ar1))
Kt_ar1<-cor.test(timevec,indic_ar1,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)
Ktauestind_ar1orig<-Kt_ar1$estimate
Kt_var<-cor.test(timevec,indic_var,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)
Ktauestind_varorig<-Kt_var$estimate
# Fit ARMA model based on AIC
arma=matrix(,4,5)
for (ij in 1:4){
for (jj in 0:4){
ARMA<-arima(nsmY, order = c(ij,0,jj),include.mean = FALSE)
arma[ij,jj+1]=ARMA$aic
# 		print(paste("AR","MA", "AIC"),quote=FALSE)
# 		print(paste(ij,jj,ARMA$aic),zero.print=".",quote=FALSE)
}
}
# Simulate ARMA(p,q) model fitted on residuals
ind=which(arma==min(arma),arr.ind=TRUE)
ARMA<-arima(nsmY, order = c(ind[1],0,ind[2]-1),include.mean = FALSE)
Ktauestind_ar1 <- numeric()
Ktauestind_var <- numeric()
for (jjj in 1:boots){
x=arima.sim(n = length(nsmY), list(ar = c(ARMA$coef[1:ind[1]]), ma = c(ARMA$coef[(1+ind[1]):(ind[1]+ind[2]-1)])),sd=sqrt(ARMA$sigma2))
## Rearrange data for indicator calculation
nMR1<-matrix(data=NA,nrow=mw,ncol=omw)
for (i in 1:omw){
Ytw<-x[i:(i+mw-1)]
nMR1[,i]<-Ytw}
# Estimate indicator
indic_ar1<-apply(nMR1,2,function(x){nAR1<-ar.ols(x,aic= FALSE, order.max=1,dmean=FALSE,intercept=FALSE)
nAR1$ar})
indic_var<-apply(nMR1,2,var)
# Calculate trend statistics
timevec<-seq(1,length(indic_ar1))
Kt_ar1<-cor.test(timevec,indic_ar1,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)
Ktauestind_ar1[jjj]<-Kt_ar1$estimate
Kt_var<-cor.test(timevec,indic_var,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)
Ktauestind_var[jjj]<-Kt_var$estimate
}
# Estimate probability of false positive
q_ar1<-sort(Ktauestind_ar1,na.last=NA)
Kpos_ar1<-max(which(Ktauestind_ar1orig>q_ar1),na.rm=TRUE)
p<-(boots+1-Kpos_ar1)/boots
print(paste('significance autocorrelation p = ',p,' estimated from ',boots,' surrogate ARMA timeseries'))
q_var<-sort(Ktauestind_var,na.last=NA)
Kpos_var<-max(which(Ktauestind_varorig>q_var),na.rm=TRUE)
p<-(boots+1-Kpos_var)/boots
print(paste('significance variance p = ',p,' estimated from ',boots,' surrogate ARMA timeseries'))
# Plotting
layout(matrix(1:2,1,2))
par(font.main=10,mar=(c(4.6,3.5,0.5,2)+0.2),mgp=c(2,1,0),oma=c(0.5,0.5,2,0),cex.axis=0.8,cex.lab=0.8,cex.main=0.8)
hist(Ktauestind_ar1,freq=TRUE,nclass=20,xlim=c(-1,1),col="blue",main=NULL,xlab="Surrogate Kendall tau estimates",ylab="occurrence",ylim=c(0,boots))
abline(v=q_ar1[s_level*boots],col="black",lwd=1)
abline(v=q_ar1[(1-s_level)*boots],col="black",lwd=1)
points(Ktauestind_ar1orig,0,pch=21, bg="black", col = "black", cex=1)
title("Autocorrelation",cex.main=1.3)
hist(Ktauestind_var,freq=TRUE,nclass=20,xlim=c(-1,1),col="blue",main=NULL,xlab="Surrogate Kendall tau estimates",ylab="occurrence",ylim=c(0,boots))
abline(v=q_var[s_level*boots],col="black",lwd=1)
abline(v=q_var[(1-s_level)*boots],col="black",lwd=1)
points(Ktauestind_varorig,0,pch=21, bg="black", col = "black", cex=1)
title("Variance" ,cex.main=1.3)
# # Plot
# layout(matrix(1:4,2,2))
# par(font.main=10,mar=(c(4.6,3.5,0.5,2)+0.2),mgp=c(2,1,0),oma=c(0.5,0.5,2,0),cex.axis=0.8,cex.lab=0.8,cex.main=0.8)
#
# fields::image.plot(width,tw,Ktauestind_ar1,zlim=c(-1,1),xlab="filtering bandwidth",ylab="rolling window size",main="trend estimate",log="y",nlevel=20,col=rainbow(20))
# ind=which(Ktauestind_ar1==max(Ktauestind_ar1),arr.ind=TRUE)
# lines(width[ind[1]],tw[ind[2]],type="p",cex=1.2,pch=17,col="black")
# hist(Ktauestind_ar1,breaks=12,col="green",main=NULL, xlab="trend estimate", ylab="occurence",border="black",xlim=c(-1,1))
# fields::image.plot(width,tw,Ktauestind_var,zlim=c(-1,1),xlab="filtering bandwidth",ylab="rolling window size",main="trend estimate",log="y",nlevel=20,col=rainbow(20))
# lines(width[ind[1]],tw[ind[2]],type="p",cex=1.2,pch=17,col="black")
# ind=which(Ktauestind_var==max(Ktauestind_var),arr.ind=TRUE)
# hist(Ktauestind_var,breaks=12,col="blue",main=NULL, xlab="trend estimate", ylab="occurence", border="black",xlim=c(-1,1))
# mtext("Autocorrelation",side=3,line=0.2, outer=TRUE)
# mtext("Variance",line=-12, at=0.5, outer=TRUE)
# Output
# 	out<-data.frame(Ktauestindorig,Ktaupindorig,Ktauestind,Ktaupind,p)
# 	colnames(out)<-c("Kendall tau estimate original","Kendall tau p-value original","Kendall tau estimate surrogates","Kendall tau p-value surrogates","significance p")
#
layout(matrix(1:2,1,2))
par(font.main=10,mar=(c(4.6,3.5,0.5,2)+0.2),mgp=c(2,1,0),oma=c(0.5,0.5,2,0),cex.axis=0.8,cex.lab=0.8,cex.main=0.8)
hist(Ktauestind_ar1,freq=TRUE,nclass=20,xlim=c(-1,1),col="blue",main=NULL,xlab="Surrogate Kendall tau estimates",ylab="occurrence")#,ylim=c(0,boots))
abline(v=q_ar1[s_level*boots],col="black",lwd=1)
abline(v=q_ar1[(1-s_level)*boots],col="black",lwd=1)
points(Ktauestind_ar1orig,0,pch=21, bg="black", col = "black", cex=1)
title("Autocorrelation",cex.main=1.3)
hist(Ktauestind_var,freq=TRUE,nclass=20,xlim=c(-1,1),col="blue",main=NULL,xlab="Surrogate Kendall tau estimates",ylab="occurrence")#,ylim=c(0,boots))
abline(v=q_var[s_level*boots],col="black",lwd=1)
abline(v=q_var[(1-s_level)*boots],col="black",lwd=1)
points(Ktauestind_varorig,0,pch=21, bg="black", col = "black", cex=1)
title("Variance" ,cex.main=1.3)
layout(matrix(1:2,1,2))
par(font.main=10,mar=(c(4.6,3.5,0.5,2)+0.2),mgp=c(2,1,0),oma=c(0.5,0.5,2,0),cex.axis=0.8,cex.lab=0.8,cex.main=0.8)
hist(Ktauestind_ar1,freq=TRUE,nclass=20,xlim=c(-1,1),col="green",main=NULL,xlab="Surrogate Kendall tau estimates",ylab="occurrence")#,ylim=c(0,boots))
abline(v=q_ar1[s_level*boots],col="black",lwd=1)
abline(v=q_ar1[(1-s_level)*boots],col="black",lwd=1)
points(Ktauestind_ar1orig,0,pch=21, bg="black", col = "black", cex=4)
title("Autocorrelation",cex.main=1.3)
hist(Ktauestind_var,freq=TRUE,nclass=20,xlim=c(-1,1),col="blue",main=NULL,xlab="Surrogate Kendall tau estimates",ylab="occurrence")#,ylim=c(0,boots))
abline(v=q_var[s_level*boots],col="black",lwd=1)
abline(v=q_var[(1-s_level)*boots],col="black",lwd=1)
points(Ktauestind_varorig,0,pch=21, bg="black", col = "black", cex=4)
title("Variance" ,cex.main=1.3)
source('~/development/RShiny_code/surrogates_RShiny.R')
surrogates_RShiny(foldbif,winsize=50,detrending="gaussian",bandwidth=NULL,boots=100,s_level=0.05,logtransform=FALSE,interpolate=FALSE)
source('~/development/RShiny_code/surrogates_RShiny.R')
source('~/development/RShiny_code/qda_ews.R')
source('~/development/RShiny_code/surrogates_RShiny.R')
surrogates_RShiny(foldbif,winsize=50,detrending="gaussian",bandwidth=NULL,boots=100,s_level=0.05,logtransform=FALSE,interpolate=FALSE)
source('~/development/RShiny_code/surrogates_RShiny.R')
surrogates_RShiny(foldbif,winsize=50,detrending="gaussian",bandwidth=NULL,boots=100,s_level=0.05,logtransform=FALSE,interpolate=FALSE)
source('~/development/RShiny_code/qda_ews.R')
qda_ews(foldbif)
source('~/development/RShiny_code/generic_RShiny.R')
qda_ews(foldbif,detrending="gaussian")
source('~/development/RShiny_code/surrogates_RShiny.R')
surrogates_RShiny(foldbif,winsize=50,detrending="gaussian",bandwidth=NULL,boots=100,s_level=0.05,logtransform=FALSE,interpolate=FALSE)
surrogates_RShiny(foldbif,winsize=50,detrending="gaussian",bandwidth=NULL,boots=100,s_level=0.1,logtransform=FALSE,interpolate=FALSE)
surrogates_RShiny(foldbif,winsize=50,detrending="gaussian",bandwidth=10,boots=100,s_level=0.05,logtransform=FALSE,interpolate=FALSE)
source('~/development/RShiny_code/qda_ews.R')
source('~/development/RShiny_code/surrogates_RShiny.R')
source('~/development/RShiny_code/qda_ews.R')
qda_ews(foldbif,detrending="gaussian")
surrogates_RShiny(foldbif,winsize=50,detrending="gaussian",bandwidth=NULL,boots=300,s_level=0.05,logtransform=FALSE,interpolate=FALSE)
surrogates_RShiny(foldbif,winsize=50,detrending="no",bandwidth=NULL,boots=300,s_level=0.05,logtransform=FALSE,interpolate=FALSE)
source('~/development/RShiny_code/surrogates_RShiny.R')
surrogates_RShiny(foldbif,winsize=50,detrending="gaussian",bandwidth=NULL,boots=100,s_level=0.05,logtransform=FALSE,interpolate=FALSE)
source('~/development/RShiny_code/surrogates_RShiny.R')
surrogates_RShiny(foldbif,winsize=50,detrending="gaussian",bandwidth=NULL,boots=100,s_level=0.05,logtransform=FALSE,interpolate=FALSE)
surrogates_RShiny(foldbif,winsize=50,detrending="gaussian",bandwidth=NULL,boots=200,s_level=0.1,logtransform=FALSE,interpolate=FALSE)
load("/Users/vasilisdakos/earlywarningtoolbox/earlywarnings/data/foldbif.rda")
surrogates_RShiny(foldbif,winsize=50,detrending="gaussian",bandwidth=NULL,boots=100,s_level=0.05,logtransform=FALSE,interpolate=FALSE)
source('~/development/RShiny_code/generic_RShiny.R')
source('~/development/RShiny_code/generic_RShiny.R')
source('~/development/RShiny_code/qda_ews.R')
qda_ews(foldbif,detrending="gaussian",boots=1)
source('~/development/RShiny_code/qda_ews.R')
qda_ews(foldbif,detrending="gaussian",boots=1)
source('~/development/RShiny_code/qda_ews.R')
source('~/development/RShiny_code/sensitivity_RShiny.R')
data(YD2PB_grayscale)
surrogates_RShiny(YD2PB_grayscale,winsize=50,detrending="gaussian",bandwidth=NULL,boots=100,s_level=0.05,logtransform=FALSE,interpolate=FALSE)
source('~/development/RShiny_code/surrogates_RShiny.R')
surrogates_RShiny(YD2PB_grayscale,winsize=50,detrending="gaussian",bandwidth=NULL,boots=100,s_level=0.05,logtransform=FALSE,interpolate=FALSE)
source('~/development/RShiny_code/surrogates_RShiny.R')
source('~/development/RShiny_code/generic_RShiny.R')
source('~/development/RShiny_code/potential_RShiny.R')
source('~/development/RShiny_code/qda_ews.R')
qda_ews(YD2PB_grayscale,winsize=50,detrending="gaussian",boots=1)
source('~/development/RShiny_code/qda_ews.R')
qda_ews(YD2PB_grayscale,winsize=50,detrending="gaussian",boots=1)
qda_ews(YD2PB_grayscale,winsize=50,detrending="gaussian",boots=1,cutoff=0.05)
source('~/development/RShiny_code/qda_ews.R')
source('~/development/RShiny_code/qda_ews.R')
qda_ews(YD2PB_grayscale,winsize=50,detrending="gaussian",boots=1,cutoff=0.05)
source('~/development/RShiny_code/qda_ews.R')
qda_ews(YD2PB_grayscale,winsize=50,detrending="gaussian",boots=1,cutoff=0.05)
qda_ews(YD2PB_grayscale,winsize=50,detrending="gaussian",boots=1,cutoff=0.1)
source('~/development/RShiny_code/qda_ews.R')
timeseries<-data.matrix(YD2PB_grayscale);param = seq(from = 1, to = length(timeseries[,1]), by =1);movpotential_ews(YD2PB_grayscale, param, sdwindow = NULL, bw = -1, minparam = NULL, maxparam = NULL, npoints = 50, thres = 0.002, std = 1, grid.size = 200, cutoff=0.5)
timeseries<-data.matrix(YD2PB_grayscale)
param = seq(from = 1, to = length(timeseries[,1]), by =1)
param
movpotential_ews(timeseries, param, sdwindow = NULL, bw = -1, minparam = NULL, maxparam = NULL, npoints = 50, thres = 0.002, std = 1, grid.size = 200, cutoff=0.5)
movpotential_ews(timeseries, param, sdwindow = NULL, bw = -1, minparam = NULL, maxparam = NULL, npoints = 50, thres = 0.002, std = 1, grid.size = 200, cutoff=0.5)
m=movpotential_ews(timeseries, param, sdwindow = NULL, bw = -1, minparam = NULL, maxparam = NULL, npoints = 50, thres = 0.002, std = 1, grid.size = 200, cutoff=0.5)
m+
m
m=movpotential_ews(timeseries[,2], param, sdwindow = NULL, bw = -1, minparam = NULL, maxparam = NULL, npoints = 50, thres = 0.002, std = 1, grid.size = 200, cutoff=0.5)
m
dim(timeseries)
source('~/development/RShiny_code/qda_ews.R')
qda_ews(YD2PB_grayscale,winsize=50,detrending="gaussian",boots=1,cutoff=0.05)
if (dim(timeseries)==2){
dataset = timeseries[,2]
}else{
dataset = timeseries[,1]
}
timeseries
dim(timeseries)==2
source('~/development/RShiny_code/qda_ews.R')
qda_ews(YD2PB_grayscale,winsize=50,detrending="gaussian",boots=1,cutoff=0.05)
library("earlywarnings", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
data(foldbif)
generuc_ews(foldbif,winsize=50)
generic_ews(foldbif,winsize=50)
q=generic_ews(foldbif,winsize=50,detrending="gaussian")
P=potential_ews(foldbif)
P=movpotential_ews(foldbif)
parm=seq(from=1, to=length(foldbif),by=1);P=movpotential_ews(foldbif)
parm=seq(from=1, to=length(foldbif),by=1);P=movpotential_ews(foldbif,parm)
parm
parm=seq(from=1, to=200,by=1);P=movpotential_ews(foldbif,parm)
X = c(rnorm(1000, mean = 0), rnorm(1000, mean = -2), rnorm(1000, mean = 2))
param = seq(0,5,length=3000)
res <- movpotential_ews(X, param, npoints = 100, thres = 0.003)
res
setwd("~/development/RShiny_code")
load("~/development/RShiny_code/fold_simulated_data.rda")
plot(foldbif)
head(foldbof)
head(foldbif)
line(foldbif)
lines(foldbif)
lines(seq(from=1, to=nrows(foldbif),by=1)foldbif)
lines(seq(from=1, to=nrows(foldbif),by=1),foldbif)
lines(seq(from=1, to=nrow(foldbif),by=1),foldbif)
nrow(foldbif)
plot(seq(from=1, to=nrow(foldbif),by=1),foldbif)
plot(seq(from=0, to=nrow(foldbif),by=1),foldbif)
View(foldbif)
plot(seq(from=0, to=nrow(foldbif),by=1),t(foldbif)
)
plot(seq(from=0, to=nrow(foldbif),by=1),t(foldbif))
plot(seq(from=1, to=nrow(foldbif),by=1),t(foldbif))
write.csv(foldbif,"foldsimulateddata")
?write.csv
write.csv(foldbif,"foldsimulateddata",dec = ".")
write.csv2(foldbif,"foldsimulateddata",dec = ".")
write.table(foldbif,"foldsimulateddata.csv",dec = ".")
library(shiny)
library(ggplot2)
# Simulated data
simulateddata <- read.csv("fold_simulated_data.csv")
# Real data
climatedata <- read.csv("climate_data.csv")
shinyServer(function(input, output) {
datasetInput <- reactive({
switch(input$timeseries,
"simulated - overharvested resource" = simulateddata,
"real-world - climate data" = climatedata)
})
output$plot <- reactivePlot(function() {
qda_ews(datasetInput(), winsize = input$winsize, detrending = input$detrending, logtransform = input$logtransform, interpolate = input$interpolate, analysis = input$analysis, cutoff = input$cutoff, detection.threshold = input$detection.threshold, grid.size = input$grid.size)
}, height=500)
})
setwd("~/development/RShiny_code/demo")
library(shiny)
library(ggplot2)
# Simulated data
simulateddata <- read.csv("fold_simulated_data.csv")
# Real data
climatedata <- read.csv("climate_data.csv")
shinyServer(function(input, output) {
datasetInput <- reactive({
switch(input$timeseries,
"simulated - overharvested resource" = simulateddata,
"real-world - climate data" = climatedata)
})
output$plot <- reactivePlot(function() {
qda_ews(datasetInput(), winsize = input$winsize, detrending = input$detrending, logtransform = input$logtransform, interpolate = input$interpolate, analysis = input$analysis, cutoff = input$cutoff, detection.threshold = input$detection.threshold, grid.size = input$grid.size)
}, height=500)
})
library(shiny)
library(ggplot2)
#library(devtools); install_github(repo = "earlywarnings-R", username = "earlywarningtoolbox", subdir = "earlywarnings", ref = "master")
library(earlywarnings)
source("qda_ews.R")
source("generic_RShiny.R")
source("surrogates_RShiny.R")
source("potential_RShiny.R")
# Simulated data
# mydata <- read.csv("fold_simulated_data.csv")
# Real data
# mydata <- read.csv("climate_data.csv")
# Run locally
shiny::runApp("demo")
setwd("~/development/RShiny_code")
library(shiny)
library(ggplot2)
#library(devtools); install_github(repo = "earlywarnings-R", username = "earlywarningtoolbox", subdir = "earlywarnings", ref = "master")
library(earlywarnings)
source("qda_ews.R")
source("generic_RShiny.R")
source("surrogates_RShiny.R")
source("potential_RShiny.R")
# Simulated data
# mydata <- read.csv("fold_simulated_data.csv")
# Real data
# mydata <- read.csv("climate_data.csv")
# Run locally
shiny::runApp("demo")
View(simulateddata)
write.table(foldbif,"foldsimulateddata.csv",dec = ".",row.names = FALSE)
library(shiny)
library(ggplot2)
#library(devtools); install_github(repo = "earlywarnings-R", username = "earlywarningtoolbox", subdir = "earlywarnings", ref = "master")
library(earlywarnings)
source("qda_ews.R")
source("generic_RShiny.R")
source("surrogates_RShiny.R")
source("potential_RShiny.R")
# Simulated data
# mydata <- read.csv("fold_simulated_data.csv")
# Real data
# mydata <- read.csv("climate_data.csv")
# Run locally
shiny::runApp("demo")
library(shiny)
library(ggplot2)
#library(devtools); install_github(repo = "earlywarnings-R", username = "earlywarningtoolbox", subdir = "earlywarnings", ref = "master")
library(earlywarnings)
source("qda_ews.R")
source("generic_RShiny.R")
source("surrogates_RShiny.R")
source("potential_RShiny.R")
# Simulated data
# mydata <- read.csv("fold_simulated_data.csv")
# Real data
# mydata <- read.csv("climate_data.csv")
# Run locally
shiny::runApp("demo")
library(shiny)
library(ggplot2)
#library(devtools); install_github(repo = "earlywarnings-R", username = "earlywarningtoolbox", subdir = "earlywarnings", ref = "master")
library(earlywarnings)
source("qda_ews.R")
source("generic_RShiny.R")
source("surrogates_RShiny.R")
source("potential_RShiny.R")
# Simulated data
# mydata <- read.csv("fold_simulated_data.csv")
# Real data
# mydata <- read.csv("climate_data.csv")
# Run locally
shiny::runApp("demo")
